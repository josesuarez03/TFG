version: '3.8'

services:
  django-api-principal:
    build:
      context: ./backend
      dockerfile: django_services/Dockerfile
    container_name: django-api-principal
    ports:
      - "8000:8000"
    depends_on:
      - postgres
    restart: on-failure
    environment:
      - IN_DOCKER=True
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DEBUG=${DEBUG}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=${REDIS_DB1}
    env_file:
      - .env
    networks:
      - app

  flask-api-chat:
    build:
      context: ./backend
      dockerfile: flask-services/Dockerfile
    container_name: flask-api-chat
    ports:
      - "5000:5000"
    depends_on:
      - mongo
      - redis
    restart: on-failure
    environment:
      - IN_DOCKER=True
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - JWT_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_API_URL=${DJANGO_API_URL}
    networks:
      - app

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./custom_postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c 'config_file=/etc/postgresql/postgresql.conf'
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h localhost"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    networks:
      - app

  mongo:
    image: mongo:latest
    container_name: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    restart: on-failure
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    networks:
      - app

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: on-failure
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    networks:
      - app

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"  # Changed to standard port 80 for HTTP
      - "443:443"  # Changed to standard port 443 for HTTPS
      - "443:443/udp"  # For QUIC/HTTP3 support
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certbot/www:/var/www/certbot:ro
      - ./nginx/certbot/conf:/etc/letsencrypt:ro

    restart: unless-stopped
    networks:
      - app
    depends_on:
      - django-api-principal
      - flask-api-chat

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./nginx/certbot/www:/var/www/certbot:rw
      - ./nginx/certbot/conf:/etc/letsencrypt:rw
    networks:
      - app
  
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:3000"
    depends_on:
      - django-api-principal
      - flask-api-chat
      - nginx
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Prevents local node_modules from overwriting container's
      - /app/.next  # Prevents local .next folder from syncing with container
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - NODE_ENV=development
    stdin_open: true  # Equivalent to -i in docker run
    tty: true         # Equivalent to -t in docker run
    restart: unless-stopped
    networks:
      - app

volumes:
  postgres_data:
    driver: local
  mongo_data:
    driver: local
  redis_data:
    driver: local
    
networks:
  app:
    driver: bridge