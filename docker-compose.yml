version: '3.8'

services:
  django-api-principal:
    build:
      context: .
      dockerfile: backend/django_services/Dockerfile
    container_name: django-api-principal
    volumes:
      - ./backend/django_services:/app  # Mapea el código a /app dentro del contenedor
    ports:
      - "8000:8000"
    depends_on:
      - postgres
    restart: on-failure
    networks:
      - app

  flask-api-chat:
    build:
      context: .
      dockerfile: backend/flask-services/Dockerfile
    container_name: flask-api-chat
    volumes:
      - ./backend/flask-services:/app  # Mapea el código a /app dentro del contenedor
    ports:
      - "5000:5000"
    depends_on:
      - mongo
      - redis
    restart: on-failure
    networks:
      - app

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydatabase
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./custom_postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c 'config_file=/etc/postgresql/postgresql.conf'
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydatabase -h localhost"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    networks:
      - app

  mongo:
    image: mongo:latest
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 1234
      MONGO_INITDB_DATABASE: DB 
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    restart: on-failure
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    networks:
      - app

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: on-failure
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    networks:
      - app

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    restart: on-failure
    networks:
      - app

volumes:
  postgres_data:
    driver: local
  mongo_data:
    driver: local
  redis_data:
    driver: local
    
networks:
  app:
    driver: bridge
