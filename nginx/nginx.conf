events {
    # Optimización de worker_connections
    worker_connections 1024;
    multi_accept on;
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Optimización de registros de logs
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main buffer=16k;
    error_log /var/log/nginx/error.log warn;

    # Mejoras de rendimiento
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Habilitar soporte para WebSockets
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # Upstream servers con balanceo de carga
    upstream django_api {
        least_conn;
        server django-api-principal:8000 max_fails=3 fail_timeout=30s;
    }

    upstream flask_api {
        least_conn;
        server flask-api-chat:5000 max_fails=3 fail_timeout=30s;
    }

    server {
        listen 80;
        listen [::]:80;
        server_name api.medicheck.com www.api.medicheck.com;

        # Directorio para desafíos de Let's Encrypt
        location /.well-known/acme-challenge/ {
            root /var/lib/letsencrypt/;
            try_files $uri =404;
        }

        # Redirigir todo el tráfico HTTP a HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    server {
        listen 443 ssl http2;
        listen 443 quic reuseport;
        listen [::]:443 ssl http2;
        listen [::]:443 quic reuseport;
        
        server_name api.medicheck.com www.api.medicheck.com;

        # Archivos de certificado SSL 
        ssl_certificate /etc/letsencrypt/live/api.medicheck.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/api.medicheck.com/privkey.pem;

        # Configuraciones de SSL y QUIC
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH;
        ssl_ecdh_curve secp384r1;
        ssl_session_timeout 10m;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;

        # Configuraciones específicas de HTTP/3 y QUIC
        add_header Alt-Svc 'h3=":443"; ma=86400, h3-29=":443"; ma=86400';
        add_header QUIC-Status $quic;

        # Habilitar OCSP Stapling
        ssl_stapling on;
        ssl_stapling_verify on;

        # HSTS (HTTP Strict Transport Security)
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

        # Configuraciones de seguridad adicionales
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-Content-Type-Options nosniff;
        add_header Referrer-Policy strict-origin-when-cross-origin;
        
        # Configuraciones comunes de proxy
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Manejo de solicitudes preflight OPTIONS para CORS
        if ($request_method = 'OPTIONS') {
            return 204;
        }

        # Proxy para la API Django
        location /api/ {
            proxy_pass http://django_api/;
            
            # CORS headers 
            add_header 'Access-Control-Allow-Origin' 'https://api.medicheck.com' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
        }
        
        # Rutas específicas para la API de Django
        location ~ ^/(admin|register|token|google|profile)/ {
            proxy_pass http://django_api;
            
            # CORS headers
            add_header 'Access-Control-Allow-Origin' 'https://api.medicheck.com' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
        }

        # Proxy para la API Flask (chat) con soporte WebSockets
        location /chat {
            proxy_pass http://flask_api;
            
            # CORS headers
            add_header 'Access-Control-Allow-Origin' 'https://api.medicheck.com' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            
            # Configuración WebSockets
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_read_timeout 86400;
            proxy_send_timeout 60s;
            proxy_connect_timeout 60s;
        }
        
        # Regla para manejar otras rutas
        location / {
            proxy_pass http://django_api;
            
            # CORS headers
            add_header 'Access-Control-Allow-Origin' 'https://api.medicheck.com' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
        }
    }
}